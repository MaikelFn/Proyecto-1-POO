/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;
import Clases.Cuenta;
import Clases.Banco;
import Clases.Comision;
import Clases.XMLWriter;
import javax.swing.JOptionPane;
import Clases.Cajero;
import Clases.Cliente;
import Clases.GeneradorContrase√±a;
import Clases.Mensaje;
import Clases.Transaccion;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
/**
 *
 * @author Tayle
 */
public class InterfazInfoCuenta extends javax.swing.JFrame {
    private Cliente cliente;
    private Cuenta cuenta;
    private InterfazCliente ventana;
    private Banco banco;
    private Comision comision;
    /**
     * Creates new form interfazInfoCuenta
     */
    public InterfazInfoCuenta(Cuenta cuenta, InterfazCliente interfaz) {
        initComponents();
        this.cuenta = cuenta;
        this.ventana = interfaz;
        this.setLocationRelativeTo(null);
        Banco banco = new Banco();
        banco.cargarClientes("clientes.xml");
        this.banco = banco;
        this.cliente = cuenta.getCliente();
        this.comision = new Comision();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Salir = new javax.swing.JButton();
        CambiarPin = new javax.swing.JButton();
        RetirarColones = new javax.swing.JButton();
        DepositarColones = new javax.swing.JButton();
        DepositarDolares = new javax.swing.JButton();
        RetirarDolares = new javax.swing.JButton();
        RealizarTransferencia = new javax.swing.JButton();
        ConsultarTransferencias = new javax.swing.JButton();
        ConsultarCompraYVenta = new javax.swing.JButton();
        ConsultarSaldo = new javax.swing.JButton();
        ConsultarEstado = new javax.swing.JButton();
        ConsultarSaldoExtranjero = new javax.swing.JButton();
        EliminarCuenta = new javax.swing.JButton();
        ConsultarComiciones = new javax.swing.JButton();
        LabelContenedor = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Salir.setBackground(new java.awt.Color(0, 0, 51));
        Salir.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Salir.setForeground(new java.awt.Color(255, 255, 255));
        Salir.setText("Salir");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });
        getContentPane().add(Salir, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 30));

        CambiarPin.setBackground(new java.awt.Color(0, 0, 51));
        CambiarPin.setForeground(new java.awt.Color(255, 255, 255));
        CambiarPin.setText("Cambiar pin");
        CambiarPin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CambiarPinActionPerformed(evt);
            }
        });
        getContentPane().add(CambiarPin, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 450, 120, -1));

        RetirarColones.setBackground(new java.awt.Color(0, 0, 51));
        RetirarColones.setForeground(new java.awt.Color(255, 255, 255));
        RetirarColones.setText("Retiro en colones");
        RetirarColones.setMaximumSize(new java.awt.Dimension(137, 23));
        RetirarColones.setMinimumSize(new java.awt.Dimension(137, 23));
        RetirarColones.setPreferredSize(new java.awt.Dimension(137, 23));
        RetirarColones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RetirarColonesActionPerformed(evt);
            }
        });
        getContentPane().add(RetirarColones, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 70, 170, -1));

        DepositarColones.setBackground(new java.awt.Color(0, 0, 51));
        DepositarColones.setForeground(new java.awt.Color(255, 255, 255));
        DepositarColones.setText("Deposito en colones");
        DepositarColones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DepositarColonesActionPerformed(evt);
            }
        });
        getContentPane().add(DepositarColones, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 160, -1));

        DepositarDolares.setBackground(new java.awt.Color(0, 0, 51));
        DepositarDolares.setForeground(new java.awt.Color(255, 255, 255));
        DepositarDolares.setText("Deposito en dolares");
        DepositarDolares.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DepositarDolaresActionPerformed(evt);
            }
        });
        getContentPane().add(DepositarDolares, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 160, -1));

        RetirarDolares.setBackground(new java.awt.Color(0, 0, 51));
        RetirarDolares.setForeground(new java.awt.Color(255, 255, 255));
        RetirarDolares.setText("Retiro en dolares");
        RetirarDolares.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RetirarDolaresActionPerformed(evt);
            }
        });
        getContentPane().add(RetirarDolares, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, 170, -1));

        RealizarTransferencia.setBackground(new java.awt.Color(0, 0, 51));
        RealizarTransferencia.setForeground(new java.awt.Color(255, 255, 255));
        RealizarTransferencia.setText("Realizar transferencia");
        RealizarTransferencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RealizarTransferenciaActionPerformed(evt);
            }
        });
        getContentPane().add(RealizarTransferencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 160, -1));

        ConsultarTransferencias.setBackground(new java.awt.Color(0, 0, 51));
        ConsultarTransferencias.setForeground(new java.awt.Color(255, 255, 255));
        ConsultarTransferencias.setText("Consultar transacciones");
        ConsultarTransferencias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConsultarTransferenciasActionPerformed(evt);
            }
        });
        getContentPane().add(ConsultarTransferencias, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 150, 170, -1));

        ConsultarCompraYVenta.setBackground(new java.awt.Color(0, 0, 51));
        ConsultarCompraYVenta.setForeground(new java.awt.Color(255, 255, 255));
        ConsultarCompraYVenta.setText("Consultar Tipo de Cambio");
        ConsultarCompraYVenta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ConsultarCompraYVentaMouseClicked(evt);
            }
        });
        ConsultarCompraYVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConsultarCompraYVentaActionPerformed(evt);
            }
        });
        getContentPane().add(ConsultarCompraYVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 390, -1));

        ConsultarSaldo.setBackground(new java.awt.Color(0, 0, 51));
        ConsultarSaldo.setForeground(new java.awt.Color(255, 255, 255));
        ConsultarSaldo.setText("Consultar saldo");
        ConsultarSaldo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConsultarSaldoActionPerformed(evt);
            }
        });
        getContentPane().add(ConsultarSaldo, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 190, 170, -1));

        ConsultarEstado.setBackground(new java.awt.Color(0, 0, 51));
        ConsultarEstado.setForeground(new java.awt.Color(255, 255, 255));
        ConsultarEstado.setText("Consultar estado de cuenta");
        ConsultarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConsultarEstadoActionPerformed(evt);
            }
        });
        getContentPane().add(ConsultarEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 450, 250, -1));

        ConsultarSaldoExtranjero.setBackground(new java.awt.Color(0, 0, 51));
        ConsultarSaldoExtranjero.setForeground(new java.awt.Color(255, 255, 255));
        ConsultarSaldoExtranjero.setText("Consultar saldo en divisa extranjera");
        ConsultarSaldoExtranjero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConsultarSaldoExtranjeroActionPerformed(evt);
            }
        });
        getContentPane().add(ConsultarSaldoExtranjero, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 490, 250, -1));

        EliminarCuenta.setBackground(new java.awt.Color(0, 0, 51));
        EliminarCuenta.setForeground(new java.awt.Color(255, 255, 255));
        EliminarCuenta.setText("Eliminar Cuenta");
        EliminarCuenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarCuentaActionPerformed(evt);
            }
        });
        getContentPane().add(EliminarCuenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 490, 120, -1));

        ConsultarComiciones.setBackground(new java.awt.Color(0, 0, 51));
        ConsultarComiciones.setForeground(new java.awt.Color(255, 255, 255));
        ConsultarComiciones.setText("Consultar Comisiones");
        ConsultarComiciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConsultarComicionesActionPerformed(evt);
            }
        });
        getContentPane().add(ConsultarComiciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 160, -1));

        LabelContenedor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Fondo Redimensionado.jpeg"))); // NOI18N
        LabelContenedor.setPreferredSize(new java.awt.Dimension(100, 550));
        getContentPane().add(LabelContenedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 430, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ConsultarSaldoExtranjeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConsultarSaldoExtranjeroActionPerformed
        if (!cuenta.getEstatus()) {
            JOptionPane.showMessageDialog(this, "La cuenta est√° inactiva, no se puede realizar esta acci√≥n", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        double Saldo=banco.convertirColonesADolares(cuenta.getSaldo());
        JOptionPane.showMessageDialog(null,"Su saldo actual en dolares es: " + Saldo);
    }//GEN-LAST:event_ConsultarSaldoExtranjeroActionPerformed

    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
        this.dispose();
        ventana.setVisible(true);
    }//GEN-LAST:event_SalirActionPerformed

    private void DepositarColonesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DepositarColonesActionPerformed

        if (!cuenta.getEstatus()) {
            JOptionPane.showMessageDialog(this, "La cuenta est√° inactiva, no se puede realizar esta acci√≥n", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String input = javax.swing.JOptionPane.showInputDialog("Ingrese el monto a depositar en colones:");

        if (input != null && !input.isEmpty()) {
            try {
                double monto = Double.parseDouble(input);

                cuenta.realizarDeposito(monto);
                LocalDate fecha = LocalDate.now();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                String fechaComoString = fecha.format(formatter);
                XMLWriter.guardarTransaccion(cliente.getIdentificacion(), "DEPOSITO", monto, fechaComoString, true, "clientes.xml");
                JOptionPane.showMessageDialog(this, 
                    "Estimado usuario: " + cliente.getNombreCompleto() + ", se han depositado correctamente " + monto + ".00 colones.\n" +
                    "[El monto real depositado a su cuenta CTAX es de " + String.format("%.2f", monto) + " colones]\n" +
                    "[El monto cobrado por concepto de comisi√≥n fue de " + String.format("%.2f", comision.calcularComision(monto, "D")) + " colones, que fueron rebajados autom√°ticamente de su saldo actual]");

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Por favor, ingrese un monto v√°lido (sin decimales).");
            }
        }
    }//GEN-LAST:event_DepositarColonesActionPerformed

    private void RetirarColonesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RetirarColonesActionPerformed
        if (!cuenta.getEstatus()) {
            JOptionPane.showMessageDialog(this, "La cuenta est√° inactiva, no se puede realizar esta acci√≥n", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String input1 = javax.swing.JOptionPane.showInputDialog("Ingrese el PIN de su cuenta:");
        if (cuenta.validarPin(input1)) {
            String palabraSecreta = GeneradorContrase√±a.generarContrase√±a();
            Mensaje mensaje = new Mensaje(cliente.getTelefono(), "C√≥digo de verificaci√≥n", palabraSecreta); // Enviando al tel√©fono
            mensaje.enviar();

            JOptionPane.showMessageDialog(this, "Estimado usuario: " + cliente.getNombreCompleto() + 
                ", se ha enviado una palabra por mensaje de texto, por favor revise sus mensajes y proceda a digitar la palabra enviada.");

            String input2 = javax.swing.JOptionPane.showInputDialog("Ingrese el c√≥digo que ha recibido por mensaje de texto: ");
            if (palabraSecreta.equals(input2)) {
                String input3 = javax.swing.JOptionPane.showInputDialog("Ingrese el monto a retirar (XXXXX.00):");
                if (input3 != null && !input3.isEmpty()) {
                    try {
                        double monto = Double.parseDouble(input3);
                        if (monto > 0 && monto <= cuenta.getSaldo()) {
                            boolean exito = cuenta.realizarRetiro(monto);
                            if (exito) {
                                cuenta.realizarRetiro(monto);
                                LocalDate fecha = LocalDate.now();
                                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                                String fechaComoString = fecha.format(formatter);
                                XMLWriter.guardarTransaccion(cliente.getIdentificacion(), "RETIRO", monto, fechaComoString, true, "clientes.xml");
                                JOptionPane.showMessageDialog(this, 
                                    "Estimado usuario: " + cliente.getNombreCompleto() + 
                                    ", el monto de este retiro de su cuenta CTAX es " + String.format("%.2f", monto) + 
                                    " colones, por favor tome el dinero dispensado.\n" +
                                    "[El monto cobrado por concepto de comisi√≥n fue de " + String.format("%.2f", comision.calcularComision(monto, "R")) + 
                                    " colones, que fueron rebajados autom√°ticamente de su saldo actual.]");
                            } else {
                                JOptionPane.showMessageDialog(this, "Fondos insuficientes.");
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Monto inv√°lido o insuficiente saldo.");
                        }
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "Por favor, ingrese un monto v√°lido (sin decimales).");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "C√≥digo de verificaci√≥n incorrecto.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "PIN incorrecto.");
        }
    }//GEN-LAST:event_RetirarColonesActionPerformed

            
    private void RetirarDolaresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RetirarDolaresActionPerformed
        if (!cuenta.getEstatus()) {
            JOptionPane.showMessageDialog(this, "La cuenta est√° inactiva, no se puede realizar esta acci√≥n", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String input = javax.swing.JOptionPane.showInputDialog("Ingrese el monto a depositar en d√≥lares:");

        if (input != null && !input.isEmpty()) {
            try {
                double monto = Double.parseDouble(input);

                double tipoCambio = banco.convertirDolaresAColones(monto);
                double montoEnColones = monto * tipoCambio;

                cuenta.realizarDeposito(montoEnColones); 
                LocalDate fecha = LocalDate.now();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                String fechaComoString = fecha.format(formatter);
                XMLWriter.guardarTransaccion(cliente.getIdentificacion(), "RETIRO", monto, fechaComoString, true, "clientes.xml");
                JOptionPane.showMessageDialog(this, 
                    "Estimado usuario: " + cliente.getNombreCompleto() + ", se han recibido correctamente " + monto + ".00 d√≥lares.\n" +
                    "[Seg√∫n el BCCR, el tipo de cambio de compra del d√≥lar de hoy " + LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")) + " es: " + String.format("%.2f", tipoCambio) + "]\n" +
                    "[El monto equivalente en colones es " + String.format("%.2f", montoEnColones) + "]\n" +
                    "[El monto real depositado a su cuenta CTAX es de " + String.format("%.2f", montoEnColones - comision.calcularComision(monto, "R")) + " colones]\n" +
                    "[El monto cobrado por concepto de comisi√≥n fue de " + String.format("%.2f", comision.calcularComision(monto, "R")) + " colones, que fueron rebajados autom√°ticamente de su saldo actual]");

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Por favor, ingrese un monto v√°lido (sin decimales).");
            }
        }
    }//GEN-LAST:event_RetirarDolaresActionPerformed

    private void DepositarDolaresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DepositarDolaresActionPerformed
        if (!cuenta.getEstatus()) {
            JOptionPane.showMessageDialog(this, "La cuenta est√° inactiva, no se puede realizar esta acci√≥n", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String input = javax.swing.JOptionPane.showInputDialog("Ingrese el monto a depositar en dolares:");
    
        try {
            double monto = Double.parseDouble(input);
        
            if (monto > 0) {
                double saldo = banco.convertirDolaresAColones(monto);
                cuenta.realizarDeposito(saldo);
                LocalDate fecha = LocalDate.now();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                String fechaComoString = fecha.format(formatter);
                XMLWriter.guardarTransaccion(cliente.getIdentificacion(), "DEPOSITO", monto, fechaComoString, true, "clientes.xml");
                JOptionPane.showMessageDialog(this, "Dep√≥sito exitoso.");
            } else {
                JOptionPane.showMessageDialog(this, "Ingrese un monto mayor a 0.");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un monto v√°lido.");
        }
    }//GEN-LAST:event_DepositarDolaresActionPerformed

    private void RealizarTransferenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RealizarTransferenciaActionPerformed
        if (!cuenta.getEstatus()) {
            JOptionPane.showMessageDialog(this, "La cuenta est√° inactiva, no se puede realizar esta acci√≥n", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String input1 = javax.swing.JOptionPane.showInputDialog("Ingrese el PIN de su cuenta:");
        if (cuenta.validarPin(input1)) {
            String palabraSecreta = GeneradorContrase√±a.generarContrase√±a();
            Mensaje mensaje = new Mensaje(cliente.getTelefono(), "C√≥digo de verificaci√≥n", palabraSecreta); // Enviando al tel√©fono
            mensaje.enviar();

            JOptionPane.showMessageDialog(this, "Estimado usuario: " + cliente.getNombreCompleto() + 
                ", se ha enviado una palabra por mensaje de texto, por favor revise sus mensajes y proceda a digitar la palabra enviada.");

            String input2 = javax.swing.JOptionPane.showInputDialog("Ingrese el c√≥digo que ha recibido por mensaje de texto: ");
            if (palabraSecreta.equals(input2)) {
                String cantidadMonto = javax.swing.JOptionPane.showInputDialog("Ingrese la cantidad a transferir en colones:");

                try {
                    double monto = Double.parseDouble(cantidadMonto);

                    if (monto <= 0) {
                        JOptionPane.showMessageDialog(this, "El monto debe ser mayor a 0", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    String numeroCuentaDestino = javax.swing.JOptionPane.showInputDialog("Ingrese el n√∫mero de cuenta destino:");

                    Cuenta cuentaDestino = null;
                    for (Cuenta c : cliente.getCuentas()) {
                        if (c.getNumeroCuenta().equals(numeroCuentaDestino)) {
                            cuentaDestino = c;
                            break;
                        }
                    }

                    if (cuentaDestino == null || cuentaDestino.getNumeroCuenta().equals(cuenta.getNumeroCuenta())) {
                        JOptionPane.showMessageDialog(this, "El n√∫mero de cuenta destino no es v√°lido o es la misma que la cuenta de origen", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    if (cuenta.realizarRetiro(monto)) {
                        cuenta.realizarRetiro(monto);
                        LocalDate fecha = LocalDate.now();
                        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                        String fechaComoString = fecha.format(formatter);
                        cuentaDestino.realizarDeposito(monto);
                        XMLWriter.reemplazarSaldo(cliente.getIdentificacion(), cuenta.getNumeroCuenta(), cuenta.getSaldo(), "clientes.xml");
                        XMLWriter.reemplazarSaldo(cuentaDestino.getCliente().getIdentificacion(), cuentaDestino.getNumeroCuenta(), cuentaDestino.getSaldo(), "clientes.xml");
                        XMLWriter.guardarTransaccion(cliente.getIdentificacion(), "RETIRO", monto, fechaComoString, true, "clientes.xml");
                        JOptionPane.showMessageDialog(this, "Estimado usuario: " + cliente.getNombreCompleto() + 
                            ", la transferencia de fondos se ejecut√≥ satisfactoriamente.\n" +
                            "El monto retirado de la cuenta origen CTAX y depositado en la cuenta destino CTAX es de " + String.format("%.2f", monto) + 
                            " colones.\n" +
                            "[El monto cobrado por concepto de comisi√≥n a la cuenta origen fue de " + String.format("%.2f", comision.calcularComision(monto, "R")) + 
                            " colones, que fueron rebajados autom√°ticamente de su saldo actual.]");
                    } else {
                        JOptionPane.showMessageDialog(this, "Fondos insuficientes para realizar la transferencia.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Por favor, ingrese una cantidad v√°lida (sin decimales).", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "C√≥digo de verificaci√≥n incorrecto.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "PIN incorrecto.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_RealizarTransferenciaActionPerformed

    private void ConsultarTransferenciasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConsultarTransferenciasActionPerformed
        if (!cuenta.getEstatus()) {
            JOptionPane.showMessageDialog(this, "La cuenta est√° inactiva, no se puede realizar esta acci√≥n", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String inputPin = JOptionPane.showInputDialog(null, "Ingrese el PIN de la cuenta:");

        if (inputPin == null || !cuenta.validarPin(inputPin)) {
            JOptionPane.showMessageDialog(null, "PIN incorrecto. Intente de nuevo.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String palabraSecreta = GeneradorContrase√±a.generarContrase√±a();
        Mensaje mensaje = new Mensaje(cliente.getTelefono(), "C√≥digo de verificaci√≥n", palabraSecreta); // Simula el env√≠o al tel√©fono
        mensaje.enviar();

        JOptionPane.showMessageDialog(this, "Estimado usuario: " + cliente.getNombreCompleto() + 
            ", se ha enviado una palabra por mensaje de texto, por favor revise sus mensajes y proceda a digitar la palabra enviada.");

        String inputPalabra = javax.swing.JOptionPane.showInputDialog("Ingrese el c√≥digo que ha recibido por mensaje de texto:");
        if (palabraSecreta == null || !palabraSecreta.equals(inputPalabra)) {
            JOptionPane.showMessageDialog(null, "La palabra ingresada no coincide. Intente de nuevo.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        StringBuilder detallesTransacciones = new StringBuilder("Estimado usuario: " + cliente.getNombreCompleto() +
            ", el detalle de todos los dep√≥sitos y retiros que se han realizado sobre su cuenta " + cuenta.getNumeroCuenta() + " es:\n\n");

        for (Transaccion transaccion : cuenta.getTransacciones()) {
            detallesTransacciones.append("Tipo de transacci√≥n: ").append(transaccion.getTipoTransaccion())
                .append(", Monto: ").append(String.format("%.2f", transaccion.getMonto()))
                .append(", Fecha: ").append(transaccion.getFecha())
                .append(", Gener√≥ comisi√≥n: ").append(transaccion.tieneComision() ? "S√≠" : "No").append("\n");
        }

        JOptionPane.showMessageDialog(null, detallesTransacciones.toString());
    }//GEN-LAST:event_ConsultarTransferenciasActionPerformed

    private void ConsultarCompraYVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConsultarCompraYVentaActionPerformed
        if (!cuenta.getEstatus()) {
            JOptionPane.showMessageDialog(this, "La cuenta est√° inactiva, no se puede realizar esta acci√≥n", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String Venta=Cajero.consultarTipoCambio("venta");
        String Compra=Cajero.consultarTipoCambio("compra");
        JOptionPane.showMessageDialog(null, """
                                            Tipo de cambio
                                            Compra de dolares: """ + Compra + "\n"
                                                + "Venta de dolares: " + Venta);
              
    }//GEN-LAST:event_ConsultarCompraYVentaActionPerformed

    private void CambiarPinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CambiarPinActionPerformed
        if (!cuenta.getEstatus()) {
            JOptionPane.showMessageDialog(this, "La cuenta est√° inactiva, no se puede realizar esta acci√≥n", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String input1 = javax.swing.JOptionPane.showInputDialog("Ingrese su PIN actual:");

        if (input1 == null || input1.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Acci√≥n cancelada", "Informaci√≥n", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        if (cuenta.validarPin(input1)) {
            String input2 = javax.swing.JOptionPane.showInputDialog("Ingrese su nuevo PIN:");

            if (input2 == null || input2.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Acci√≥n cancelada", "Informaci√≥n", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            if (input2.length() < 4 || input2.length() > 6) {
                JOptionPane.showMessageDialog(this, "El PIN debe tener entre 4 y 6 caracteres.");
            } else {
                cuenta.cambiarPin(input2);
                XMLWriter.reemplazarPin(cliente.getIdentificacion(), cuenta.getNumeroCuenta(), input2, "clientes.xml");

                JOptionPane.showMessageDialog(this, 
                    "Estimado usuario: " + cliente.getNombreCompleto() + ", le informamos que se ha cambiado satisfactoriamente el PIN de su cuenta " + cuenta.getNumeroCuenta() + ".");
            }
        } else {
            JOptionPane.showMessageDialog(this, "El PIN ingresado es incorrecto");
        }
    }//GEN-LAST:event_CambiarPinActionPerformed

    private void ConsultarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConsultarEstadoActionPerformed
        String numeroCuenta = cuenta.getNumeroCuenta();
        String titular = cuenta.getCliente().getNombreCompleto();
        String fechaCreacion = cuenta.getFechaCreacion().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
        double saldoLocal = cuenta.getSaldo();
        double saldoEnDolares = banco.convertirColonesADolares(saldoLocal);
        String estadoCuenta = cuenta.getEstatus() ? "Activa" : "Inactiva";

        DecimalFormat df = new DecimalFormat("#.00");

        StringBuilder estadoInfo = new StringBuilder();
        estadoInfo.append("N√∫mero de Cuenta: ").append(numeroCuenta).append("\n")
                  .append("Titular de la Cuenta: ").append(titular).append("\n")
                  .append("Fecha de Creaci√≥n: ").append(fechaCreacion).append("\n")
                  .append("Saldo Actual: ‚Ç°").append(df.format(saldoLocal)).append("\n")
                  .append("Saldo en D√≥lares: $").append(df.format(saldoEnDolares)).append("\n")
                  .append("Estado de la Cuenta: ").append(estadoCuenta).append("\n\n")
                  .append("Transacciones Recientes:\n");

        for (Transaccion transaccion : cuenta.getTransacciones()) {
            estadoInfo.append("- ")
                      .append(transaccion.getTipoTransaccion()).append(": ‚Ç°").append(df.format(transaccion.getMonto()))
                      .append(" ($").append(df.format(banco.convertirColonesADolares(transaccion.getMonto()))).append(")")
                      .append(" - Fecha: ").append(transaccion.getFecha().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")))
                      .append("\n");
        }

        JOptionPane.showMessageDialog(null, estadoInfo.toString(), "Estado de Cuenta", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_ConsultarEstadoActionPerformed

    private void ConsultarSaldoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConsultarSaldoActionPerformed
        if (!cuenta.getEstatus()) {
            JOptionPane.showMessageDialog(this, "La cuenta est√° inactiva, no se puede realizar esta acci√≥n", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String pinIngresado = JOptionPane.showInputDialog(null, "Ingrese el PIN de la cuenta:");

        if (pinIngresado == null) {
            return;
        }

        if (!pinIngresado.equals(cuenta.getPin())) {
            JOptionPane.showMessageDialog(null, "PIN incorrecto. Intente de nuevo.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        JOptionPane.showMessageDialog(null, 
            "Estimado usuario: " + cliente.getNombreCompleto() + ", el saldo actual de su cuenta " + cuenta.getNumeroCuenta() + 
            " es de " + String.format("%.2f", cuenta.getSaldo()) + " colones.");
    }//GEN-LAST:event_ConsultarSaldoActionPerformed

    private void ConsultarCompraYVentaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ConsultarCompraYVentaMouseClicked
        if (!cuenta.getEstatus()) {
            JOptionPane.showMessageDialog(this, "La cuenta est√° inactiva, no se puede realizar esta acci√≥n", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
       
    }//GEN-LAST:event_ConsultarCompraYVentaMouseClicked

    private void EliminarCuentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarCuentaActionPerformed
        if(cuenta.getEstatus()){
        String input1 = javax.swing.JOptionPane.showInputDialog("Ingrese el PIN de su cuenta:");
        if (cuenta.validarPin(input1)){
            JFrame ventanaConfirmacion = new JFrame("Confirmar eliminaci√≥n de cuenta");
            ventanaConfirmacion.setSize(400, 150);
            ventanaConfirmacion.setLayout(new FlowLayout());
            ventanaConfirmacion.setLocationRelativeTo(null);

            JLabel labelConfirmacion = new JLabel("Estimado " + cliente.getNombreCompleto()+ 
                ", usted est√° a punto de eliminar su cuenta. Saldo actual: " + cuenta.getSaldo());
            JButton botonAceptar = new JButton("Aceptar");
            JButton botonCancelar = new JButton("Cancelar");

            ventanaConfirmacion.add(labelConfirmacion);
            ventanaConfirmacion.add(botonAceptar);
            ventanaConfirmacion.add(botonCancelar);

            ventanaConfirmacion.setVisible(true);

            botonAceptar.addActionListener(new ActionListener() {
              @Override
              public void actionPerformed(ActionEvent e) {
                ventanaConfirmacion.dispose();
                if (cuenta.getSaldo()!=0){
                    javax.swing.JOptionPane.showMessageDialog(ventanaConfirmacion, "Tome el dinero que ha sido dispensado");
                }
                cuenta.desactivarCuenta();
                JOptionPane.showMessageDialog(ventanaConfirmacion, "La cuenta ah sido eliminada con exito");
                
              }
            });

            botonCancelar.addActionListener(new ActionListener() {
              @Override
              public void actionPerformed(ActionEvent e) {
                ventanaConfirmacion.dispose();
              }
            });
            
        }
        }else{
            JOptionPane.showMessageDialog(this, "La cuenta esta desactivada", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_EliminarCuentaActionPerformed

    private void ConsultarComicionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConsultarComicionesActionPerformed
        Comision comisiones=cuenta.getComiciones();
        JOptionPane.showMessageDialog(null, "Total Comiciones: "+comisiones.getTotalComisiones()+"\n"+
        "Comiciones Por Retiro: "+comisiones.getComisionesRetiros()+"\n"+"Comiciones Por Deposito: "+comisiones.getComisionesDepositos());
    }//GEN-LAST:event_ConsultarComicionesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazInfoCuenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazInfoCuenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazInfoCuenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazInfoCuenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Banco banco = new Banco();
                banco.cargarClientes("clientes.xml");
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CambiarPin;
    private javax.swing.JButton ConsultarComiciones;
    private javax.swing.JButton ConsultarCompraYVenta;
    private javax.swing.JButton ConsultarEstado;
    private javax.swing.JButton ConsultarSaldo;
    private javax.swing.JButton ConsultarSaldoExtranjero;
    private javax.swing.JButton ConsultarTransferencias;
    private javax.swing.JButton DepositarColones;
    private javax.swing.JButton DepositarDolares;
    private javax.swing.JButton EliminarCuenta;
    private javax.swing.JLabel LabelContenedor;
    private javax.swing.JButton RealizarTransferencia;
    private javax.swing.JButton RetirarColones;
    private javax.swing.JButton RetirarDolares;
    private javax.swing.JButton Salir;
    // End of variables declaration//GEN-END:variables

    private double convertirColonesADolares(double Colones) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
